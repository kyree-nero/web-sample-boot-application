/*
 * This file was generated by the Gradle 'init' task.
 */



buildscript {
    ext {
        springBootPlugin = 'org.springframework.boot:spring-boot-gradle-plugin'
        thinPlugin = 'org.springframework.boot.experimental:spring-boot-thin-gradle-plugin'
        thinVersion = '1.0.11.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("${springBootPlugin}:${springBootVersion}")
        classpath("${thinPlugin}:${thinVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE"
    }
}



apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//add tasks thinJar and thinResolve for thin JAR deployments
//apply plugin: 'org.springframework.boot.experimental.thin-launcher'

group = 'sample'
//artifact = 'web-sample-boot-application'
version = '0.0.1-SNAPSHOT'

//description = 'web-sample-boot-application'

sourceCompatibility = 11

repositories {
    mavenCentral()
}


/*
dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:'+springBootVersion
  }
}
*/



dependencies {
	//logger.lifecycle("${buildDir}/libs/${description}-${version}.jar")
	//springVersion = '2.3.2.RELEASE'
	implementation(
		platform("org.springframework.boot:spring-boot-dependencies:"+springBootVersion)
	)
	
	//implementation 'org.springframework.boot:spring-boot-starter'
    /*implementation('org.springframework.boot:spring-boot-starter'){
    	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }*/
    implementation 'org.springframework.boot:spring-boot-starter-web:'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2:'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:'
    //implementation('org.springframework.boot:spring-boot-starter-jdbc:'){
   // 	exclude group: 'com.zaxxer', module: 'HikariCP'
	//}
    implementation 'org.springframework.boot:spring-boot-starter-security:'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:'
    implementation 'org.springframework.boot:spring-boot-starter-validation:'
    
    implementation 'mysql:mysql-connector-java'
    implementation 'org.apache.commons:commons-dbcp2:'+commonsDbcp2Version
    
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test:'
    testImplementation 'org.springframework.security:spring-security-test:'
    testImplementation 'com.h2database:h2:'+h2Version
}


configurations {
    compile.exclude module: 'spring-boot-starter-logging'
    compile.exclude module: 'HikariCP'
    
} 


test {
  // enable TestNG support (default is JUnit)
  // useTestNG()
  // enable JUnit Platform (a.k.a. JUnit 5) support
  useJUnitPlatform()

  // set a system property for the test JVM(s)
  // systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  // include 'org/foo/**'
  // exclude 'org/boo/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  // minHeapSize = "128m"
  // maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  // jvmArgs '-XX:MaxPermSize=256m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // Fail the 'test' task on the first test failure
  failFast = true

  // listen to standard out and standard error of the test JVM(s)
  // onOutput { descriptor, event ->
  //   logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  //}
}

springBoot {
    mainClassName = 'com.example.app.Application'
}


bootJar {
    mainClassName = 'com.example.app.Application'
   /* doLast(){
    	logger.lifecycle("xyz")
    	copy{
			from '${buildDir}/libs/*'
			into 'target'
		}
		logger.lifecycle("xyz1")
    }*/
}



task copyToTarget(dependsOn: build, type: Copy) {
	//logger.lifecycle("-- $buildDir/libs/$description-$version.jar")
	//logger.lifecycle("----   ${x}")
	//logger.lifecycle("----   ${projectName}")
	//logger.lifecycle("${buildDir}/libs/${description}-${version}.jar")
    //from file("${buildDir}/libs/${description}-${version}.jar")
    
    
    	//logger.lifecycle("----   ${description}")
    	//logger.lifecycle("----   ${projectName}")
    	from file("${buildDir}/libs/${projectName}-${version}.jar")
	    into file("target")
	    
	    
   
}



jacoco {
    toolVersion = "0.8.6"
    //reportsDirectory = file("$buildDir/customJacocoReportDir")
}



jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}






tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


/*
task writeNewPom {
    doLast {
        pom {
            project {
                groupId 'org.example'
                artifactId 'test'
                version '1.0.0'
                inceptionYear '2008'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("test.pom.xml")
    }
}
*/